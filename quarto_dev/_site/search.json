[
  {
    "objectID": "main_01_morphospace.html",
    "href": "main_01_morphospace.html",
    "title": "Morphogroup Definition",
    "section": "",
    "text": "Code\nrm(list = ls())\nlibrary(DT)\nlibrary(EcotaxaTools)\nlibrary(ggplot2)\nlibrary(ggpubr)\nlibrary(cowplot)\nsource('../R/tools.R')\n\npca_cope <- readRDS('../data/02_PCA-copepods.rds')\npca_results <- readRDS('../data/02_cope-pca-res.rds')\nuvp_data <- readRDS('../data/01_uvp-trim-final_large.rds') |> \n  trim_to_cope()\n\n\n# |- Assign percentiles of morphogroups -----------------\npca_cope$PC1_percentile <- sapply(pca_cope$PC1, function(x) ecdf(pca_cope$PC1)(x))\npca_cope$PC2_percentile <- sapply(pca_cope$PC2, function(x) ecdf(pca_cope$PC2)(x))\n\n# |- Assign morphogroups --------\n\nmorpho_switch <- function(x) {\n  if(x < .25) {\n    return('low')\n  } else if (x < .75) {\n    return('mid')\n  } else {\n    return('high')\n  }\n}\npca_cope$pc1_class <- sapply(pca_cope$PC1_percentile, morpho_switch)\npca_cope$pc2_class <- sapply(pca_cope$PC2_percentile, morpho_switch)\n\npca_cope$pc1_class <- factor(pca_cope$pc1_class, levels = c('low','mid','high'))\npca_cope$pc2_class <- factor(pca_cope$pc2_class, levels = c('low','mid','high'))"
  },
  {
    "objectID": "main_01_morphospace.html#morphogroup-definition-separation",
    "href": "main_01_morphospace.html#morphogroup-definition-separation",
    "title": "Morphogroup Definition",
    "section": "Morphogroup definition separation",
    "text": "Morphogroup definition separation\nTo assure that the morphological groups created were different along ecologically relevant metrics, the groups were compared against known metrics which are meaningful to copepod morphology. The three size groups along PC1 were compared using feret diameter and the groups along PC2 were assessed using the mean grey value.\n\n\nCode\n####\n# Assign Clusters to individuals ########\n####\n\nfor(i in 1:length(uvp_data$zoo_files)) {\n  idx <- which(pca_cope$orig_id %in% uvp_data$zoo_files[[i]]$orig_id)\n  uvp_data$zoo_files[[i]]$pc1_class <- pca_cope$pc1_class[idx]\n  uvp_data$zoo_files[[i]]$pc2_class <- pca_cope$pc2_class[idx]\n}\n\nall_copes <- uvp_data$zoo_files |> \n  list_to_tib('profileid')\n\n# convert to mm\nall_copes$feret <- all_copes$feret * unique(uvp_data$meta$acq_pixel)\n\nferet_plot <- ggplot(all_copes) + \n  geom_boxplot(aes(x = as.factor(pc1_class),\n                   y = feret,\n                   fill = as.factor(pc1_class))) +  scale_fill_manual(values = gg_cbb_col(3))+\n  labs(x = \"PC1-Groups\", y = 'Feret Diam [mm]') + \n  theme_pubr()+\n  theme(legend.position = 'none')\n\n\n\nmeanGrey_plot <- ggplot(all_copes) +\n  geom_boxplot(aes(x = as.factor(pc2_class),\n                   y = mean,\n                   fill = as.factor(pc1_class))) +  \n  scale_fill_manual(values = gg_cbb_col(3))+\n  labs(x = \"PC2-Groups\", y = 'Mean Grey Value', fill = 'PC1-Groups') +\n  theme_pubr()+\n  theme(legend.position = c(.1,.20), legend.box.background = element_rect(),\n        legend.background = element_blank())\n\n\nmetric_plot <- ggarrange(feret_plot, meanGrey_plot, ncol = 1)\nmetric_plot\n\n\n\n\n\nCode\n# ggsave('../media/raw_02_figure.pdf',metric_plot,\n#        width = 80, height = 160, units = 'mm', dpi = 600)\n\n\nAcross all PC1-groups, there was a clear difference in feret diameter. The median feret diameter of the low group is 1.9708937 mm. The median feret diameter of the mid and high groups are 2.8379297mm and 4.8253025mm, respectively. All groups were significantly different from one another (Dunn Krustall-wallace test, p < 0.001). PC2 groups as a whole were also significantly different from one another (Dunn Krustall-wallace test, p < 0.001). However, within each PC2-group, there was a clear tendency for larger copepods (PC1-groupings) to be lighter. This phenomena is likely due to the ease of identifying a more transparent copepod if it is larger. This justifies the comparison of PC2-groups to be within a PC1-group - so that the effect of transparency on copepod DVM is separated from the effect of size."
  },
  {
    "objectID": "main_03_Vert-Distrib.html",
    "href": "main_03_Vert-Distrib.html",
    "title": "Vertical Distribution of Morphotypes",
    "section": "",
    "text": "To understand the vertical distribution of the different morphological groups, the concentration of each group was calculated in a 20m-bin. Groups were identified based on their PC1 and PC2 percentile groups. The binned concentrations were averaged across all profiles in the study (following the average-cast method described in Barth & Stone 2022. Using the average-cast approach is beneficial as it allows for data to be included from casts with different max descents, so long as an entire 20m depth bin was sampled, it is included. Averages were calculated separately for daytime and nighttime casts."
  },
  {
    "objectID": "main_03_Vert-Distrib.html#figures-take-aways",
    "href": "main_03_Vert-Distrib.html#figures-take-aways",
    "title": "Vertical Distribution of Morphotypes",
    "section": "Figures & Take-aways:",
    "text": "Figures & Take-aways:\nThere was an evident day/night difference in the average vertical structure across all morphological groups. This pattern is primarily in the upper 600m. While there were copepods observed throughout the mesopelagic, there was not a noticable difference between the day and nighttime average concentrations. Additionally, the variation between casts was extremely large, as seen with the standard deviation of different profiles. Often the standard deviation of depth-bin abundance is much larger than the average abundance. This is in part driven by high variability between cruises which occurred in different seasonsgetting averaged together. However, there is also large variability between individual casts, which can be driven by the small sampling volume of the UVP as described by Barth & Stone 2022.\n\n\nCode\n####\n# Get project-wide night-day differences #######\n####\n\nrm(list = ls())\nlibrary(EcotaxaTools)\nlibrary(ggplot2)\nlibrary(ggpubr)\nsource('../R/tools.R')\n\n\nuvp_data  <- readRDS('../data/01_uvp-trim-final_large.rds') |> \n  trim_to_cope()\n\n\npc2_bin_sm <- readRDS('../data/03b_pc2-sm-bins.rds')\npc2_bin_mid <- readRDS('../data/03b_pc2-bins.rds')\npc2_bin_lg <- readRDS('../data/03b_pc2-lg-bins.rds')\n\n# |- Reformat PC group names --------------------\n# group names will be pc1_pc2: e.g. low-low, low-mid, etc\n\n\n# assign pc1-class to each\ngroup_renamer <- function(x, pc1_group) {\n  x$group <- paste0(pc1_group, '_', x$group)\n  return(x)\n}\n\npc2_bin_lg <- pc2_bin_lg |> \n  lapply(group_renamer, 'high') |> \n  assign_etx_class('zoo_conc_list')\npc2_bin_mid <- pc2_bin_mid |> \n  lapply(group_renamer, 'mid')|> \n  assign_etx_class('zoo_conc_list')\npc2_bin_sm <- pc2_bin_sm |> \n  lapply(group_renamer, 'low')|> \n  assign_etx_class('zoo_conc_list')\n\n# |- Merger into a single conc list ---------------\n\nbin_merger <- function(profileid) {\n  lg_df <- pc2_bin_lg[[profileid]]\n  mid_df <- pc2_bin_mid[[profileid]]\n  sm_df <- pc2_bin_sm[[profileid]]\n  \n  return(do.call(rbind, list(lg_df, mid_df, sm_df)))\n}\n\nall_casts <- uvp_data$meta$profileid |> \n  lapply(bin_merger)\nnames(all_casts) <- uvp_data$meta$profileid\n\ncast_times <- list(day = uvp_data$meta$profileid[which(uvp_data$meta$tod == 'day')],\n                   night = uvp_data$meta$profileid[which(uvp_data$meta$tod == 'night')])\n\navg_cope <- all_casts |> \n  average_casts(cast_times) |> \n  lapply(bin_format)\n\n\n\n\nCode\n#| column: page-outset\n\n###\n# Create group profiles ####\n###\n\n\n# |- Concentration Profile --------------------------------------------\n\ngroup_profile <- function(g) {\n  ret_plot <- ggplot()+\n    geom_rect(data = avg_cope$day[avg_cope$day$group == g,],\n              aes(xmin = min_d, xmax = max_d,\n                  ymin = 0, ymax = -mean),\n              fill = dn_cols['day']) +\n    geom_errorbar(data = avg_cope$day[avg_cope$day$group == g,],\n                  aes(x = mp, ymin = -mean, ymax = -(mean+sd)),\n                  alpha = .25) +\n    geom_rect(data = avg_cope$night[avg_cope$night$group == g,],\n              aes(xmin = min_d, xmax = max_d,\n                  ymin = 0, ymax = mean),\n              fill = dn_cols['night']) +\n    geom_errorbar(data = avg_cope$night[avg_cope$night$group == g,],\n                  aes(x = mp, ymin = mean, ymax = (mean+sd)),\n                  alpha = .25)+\n    labs(x = 'Depth [m]', y = 'Concentration [indv./m3]')+\n    coord_flip()+\n    scale_x_reverse(expand = c(0,0))+\n    scale_y_continuous(position = 'right',\n                       labels = abs,\n                       limits = c(-1.75,1.75)) +\n    theme_pubr()\n\n  return(ret_plot)\n}\n\ngroup_cats <- c('low_high','mid_high','high_high',\n                'low_mid','mid_mid','high_mid',\n                'low_low','mid_low','high_low')\n\nplot_list <- list()\nfor(g in group_cats) {\n  plot_list[[g]] <- group_profile(g)\n}\n\n\ny_axis_clear <- theme(axis.text.y = element_blank(),\n                      axis.title.y = element_blank())\n\nx_axis_clear <- theme(axis.title.x = element_blank())\n\nboth_axis_clear <- y_axis_clear + x_axis_clear\n\n\nggarrange(plot_list$low_high, #TL\n          plot_list$mid_high + y_axis_clear, #TM\n          plot_list$high_high + y_axis_clear, #TR\n          plot_list$mid_high + x_axis_clear, #ML\n          plot_list$mid_mid + both_axis_clear, #MM\n          plot_list$high_mid + both_axis_clear, #MR\n          plot_list$low_low + x_axis_clear, #BL\n          plot_list$low_mid + both_axis_clear, #BM\n          plot_list$low_high + both_axis_clear, #BR\n          nrow = 3, ncol = 3,\n          widths = c(1,.85,.85,\n                     1,.85,.85,\n                     1,.85,.85))\n\n\n\n\n\nWe can zoom in on the upper 600m to get a better picture of the changes in the upper layers.\n\n\nCode\n#| column: screen-inset\n\nshort_plot <- ggarrange(plot_list$low_high + xlim(600,0), #TL\n          plot_list$mid_high + y_axis_clear + xlim(600,0), #TM\n          plot_list$high_high + y_axis_clear + xlim(600,0), #TR\n          plot_list$mid_high + x_axis_clear + xlim(600,0), #ML\n          plot_list$mid_mid + both_axis_clear + xlim(600,0), #MM\n          plot_list$high_mid + both_axis_clear + xlim(600,0), #MR\n          plot_list$low_low + x_axis_clear + xlim(600,0), #BL\n          plot_list$low_mid + both_axis_clear + xlim(600,0), #BM\n          plot_list$low_high + both_axis_clear + xlim(600,0), #BR\n          nrow = 3, ncol = 3,\n          widths = c(1,.85,.85,\n                     1,.85,.85,\n                     1,.85,.85))\n\nshort_plot\n\n\n\n\n\nCode\n# ggsave('../media/raw_03_figure.pdf',short_plot,\n#        height = 170, width = 170, units = 'mm', dpi = 600)"
  },
  {
    "objectID": "main_04_WMD-by-morphogroup.html",
    "href": "main_04_WMD-by-morphogroup.html",
    "title": "Weighted Mean Depth of Morphological Groups",
    "section": "",
    "text": "Weighted mean depth is a commonly used metric to describe zooplankton populations and vertical distributions. Zooplankton populations can often be found in bimodal patterns throughout the water column, with a subsurface peak and a deeper mesopelagic peak see here. The WMD of a distribution effectively provides a center of mass for the zooplankton in the water column. However, interpreting the WMD often requires context as the depth itself may not be informative. WMD can be particularly useful for DVM studies, as it can show the differences in daytime and nighttime distributions Ohman & Romagnan 2016. Additionally, by calculating the average WMD across multiple samples, the variability (or standard deviation) in WMD can be informative to the overall spread of the zooplankton distribution throughout the water column.\nIn this study, because profiles extend to different depths and sampling effort (volume) is inconsistent between profiles directly calculating the average WMD is not feasible. However, understanding variation around the WMD is necessary to interpret the vertical structure and strength of DVM. Here, we took a depth-bin constrained bootstrap approach to define WMD with a confidence interval. To do this, the concentration of each group, was calculated in 20m depth bin for each profile. Then all profiles from the same time of day were ‘pooled’. This provides a distribution of concentrations in each depth bin. Traditional bootstrapping randomly samples with replacement from all observations. With vertically structured data however, full random sampling would bias estimates towards the surface, where there were more profiles. To avoid this, samples were “bin-constrained” such that for each iteration, a random observation was sampled within each depth bin, then replaced for the next iteration. A maximum depth was set to 600m, as it is unlikely that copepods are migrated beyond this depth (See figure 3). This approach then effectively created a random profile by resampling a concentration, \\(conc^*\\), from each depth bin, \\(d\\). This profile then was used to calculate a bootstrapped weighted mean depth, \\(WMD^*\\). This was done for each morphological group \\(g\\), at each time of day \\(t\\) (\\(\\ref{Equation 1}\\)).\n\\[\\begin{align}\n  $WMD^*_{g,t} = \\sum_{i}^{N = 60}{\\frac{d_i(conc^*_{i,g,t})}{\\sum_i^{N = 60}{conc^*_{i,g,t}}}}$ \\label{Equation 1}\n\\end{align}\\]\nThe distribution of \\(WMD^*_{g,t}\\) then was used to calculate a bootstrapped mean and 95% confidence interval. Then, the confidence intervals could be compared between times of day and morphological groups to assess the strength of DVM. This approach was used to investigate the DVM hypotheses related to size and transparency. Using PC1 to assess size, the WMD was compared between the three PC1-groups by percentile level. Then to assess the effect of transparency, while accounting for size, the WMD was compared between PC2-groups for each PC1-grouping.\nFrom the visual detection hypothesis, it is predicted that larger and darker copepods will have a larger signal of DVM. A larger signal of DVM would be evident by a clearly deeper (non-overlapping 95% CI) daytime WMD."
  },
  {
    "objectID": "main_04_WMD-by-morphogroup.html#key-figures-and-takeaways",
    "href": "main_04_WMD-by-morphogroup.html#key-figures-and-takeaways",
    "title": "Weighted Mean Depth of Morphological Groups",
    "section": "Key Figures and Takeaways",
    "text": "Key Figures and Takeaways\nFor the size assessment, there was a clear signal of DVM across all groups. All the daytime confidence intervals were deeper and non-overlapping with the nighttime intervals. However, the depth of the daytime WMD was different across PC1-groups. The low group had the shallowest WMD (95% CI: [235.2,296.0m]), followed by the middle group (95% CI: [309.0,347.1m]), then the high group (95% CI: [352.3,405.0m]). This pattern provides strong support for the size-dependent DVM hypothesis. The larger a copepod is, the deeper it must migrate during the daytime to avoid visual detection.\nFor the influence of transparency, the effect is only clear amongst large (high-PC1 group). For the low-PC1 and mid-PC1 groups, the daytime WMD 95% CI’s are overlapping for all levels of PC2-groups. However, within the larger copepods (high PC1-group), there was a clear signal of weaker DVM by lighter (low PC2-group) copepods. The mid-PC2 and high-PC2 groups had deeper, yet overlapping, daytime 95%CIs. This suggests that some larger copepods can escape the DVM burden through maintaining transparency.\n\n\nCode\nrm(list = ls())\nlibrary(ggplot2)\nlibrary(ggpubr)\nsource('../r/tools.R')\n\nboot_wmd <- readRDS('../data/03b_alt-mg-wmd-bins.rds')\n\n\n# |- Summarize DF -----------------------\n\nsummarize_wmd <- function(wmd_group) {\n  \n  day_summary <- wmd_group$day |> \n    lapply(quantile, probs = c(0.025,0.5,.975))\n  \n  night_summary <- wmd_group$night |> \n    lapply(quantile, probs = c(0.025,0.5,0.975))\n  \n  wmd_df <- data.frame(group = rep(c('low','mid','high'), each = 2),\n                       tod = rep(c('day','night'), times = 3),\n                       lbound = rep(NA,6),\n                       mean = rep(NA,6),\n                       hbound = rep(NA,6))\n  \n  for(group in c('low','mid','high')) {\n    wmd_df[['lbound']][which(wmd_df[['tod']] == 'day' &\n                               wmd_df[['group']] == group)] <- day_summary[[group]][['2.5%']]\n    wmd_df[['mean']][which(wmd_df[['tod']] == 'day' &\n                               wmd_df[['group']] == group)] <- mean(wmd_group$day[[group]])\n    wmd_df[['hbound']][which(wmd_df[['tod']] == 'day' &\n                               wmd_df[['group']] == group)] <- day_summary[[group]][['97.5%']]\n    \n    wmd_df[['lbound']][which(wmd_df[['tod']] == 'night' &\n                               wmd_df[['group']] == group)] <- night_summary[[group]][['2.5%']]\n    wmd_df[['mean']][which(wmd_df[['tod']] == 'night' &\n                               wmd_df[['group']] == group)] <- mean(wmd_group$night[[group]])\n    wmd_df[['hbound']][which(wmd_df[['tod']] == 'night' &\n                               wmd_df[['group']] == group)] <- night_summary[[group]][['97.5%']]\n  }\n  wmd_df$group <- factor(wmd_df$group, levels = c('low','mid','high'))\n  return(wmd_df)\n}\n\npc1_wmd_df <- boot_wmd$pc1 |> summarize_wmd()\n\n\n\npc1_plot <- ggplot(pc1_wmd_df) +\n  geom_point(aes(x = group,\n                 y = mean,\n                 color = tod),\n             position = position_dodge(width = .5),\n             size = 2) +\n  geom_errorbar(aes(x = group,\n                    ymin = lbound,\n                    ymax = hbound,\n                    color = tod),\n                width = .5,\n                position = position_dodge(width = .5),\n                size = .5) +\n  scale_color_manual(values = c(dn_cols['day'],dn_cols['night'])) +\n  scale_y_reverse(limits = c(600,0)) +\n  labs(y = 'Depth [m]', x = 'PC1 Level Groups', col = \"\")+\n  theme_pubr()\npc1_plot\n\n\n\n\n\nCode\n# \n# ggsave('../media/raw_04_figure.pdf', pc1_plot,\n#        width = 80, height = 80, units = 'mm',\n#        dpi = 600)\n  \nknitr::kable(pc1_wmd_df)\n\n\n\n\n\ngroup\ntod\nlbound\nmean\nhbound\n\n\n\n\nlow\nday\n235.1989\n265.1734\n295.9534\n\n\nlow\nnight\n148.8018\n168.8790\n190.6532\n\n\nmid\nday\n308.9897\n327.7383\n347.3109\n\n\nmid\nnight\n143.4335\n158.9165\n176.3030\n\n\nhigh\nday\n352.2630\n378.8520\n404.9709\n\n\nhigh\nnight\n167.0618\n191.9661\n219.3338\n\n\n\n\n\nObserve for PC2 breaks by PC1 group\n\n\nCode\nsmall_pc2 <- boot_wmd$pc2_sm |> summarize_wmd()\nmid_pc2 <- boot_wmd$pc2_mid |> summarize_wmd()\nlg_pc2 <- boot_wmd$pc2_lg |> summarize_wmd()\n\npc2_plotter <- function(wmd, pc1_group){\n  ggplot(wmd) +\n    geom_point(aes(x = group,\n                   y = mean,\n                   color = tod),\n               position = position_dodge(width = .5),\n               size = 2) +\n    geom_errorbar(aes(x = group,\n                      ymin = lbound,\n                      ymax = hbound,\n                      color = tod),\n                  width = .5,\n                  position = position_dodge(width = .5),\n                  size = .5) +\n    scale_color_manual(values = c(dn_cols['day'],dn_cols['night'])) +\n    scale_y_reverse(limits = c(600,0)) +\n    labs(y = 'Depth [m]', x = paste0('PC2 Level Groups','\\n',pc1_group), col = \"\")+\n    theme_pubr()\n}\n\nsm_plot <- pc2_plotter(small_pc2, 'Small PC1')\nmid_plot <- pc2_plotter(mid_pc2, 'Mid PC1')\nlg_plot <- pc2_plotter(lg_pc2, 'Large PC1')\n\npc2_plot <- ggarrange(sm_plot, mid_plot + theme(axis.title.y = element_blank(),\n                                                axis.text.y = element_blank()),\n                      lg_plot + theme(axis.title.y = element_blank(),\n                                      axis.text.y = element_blank()),\n          ncol = 3, common.legend = T, widths = c(1,.9,.9))\n\npc2_plot\n\n\n\n\n\nCode\n# ggarrange(pc1_plot,\n#           pc2_plot,\n#           nrow = 2)\n\n\nggsave('../media/raw_05_figure.pdf', pc2_plot,\n       width = 180, height = 80, units = 'mm',\n       dpi = 600)\n\n\n\n\nCode\nDT::datatable(small_pc2, caption = 'Small PC1 - PC2 Groups')\n\n\n\n\n\n\n\nCode\nDT::datatable(mid_pc2, caption = 'Mid PC1 - PC2 Groups')\n\n\n\n\n\n\n\nCode\nDT::datatable(lg_pc2, caption = 'Large PC1 - PC2 Groups')"
  },
  {
    "objectID": "supp_01_ctd-by-cruise.html",
    "href": "supp_01_ctd-by-cruise.html",
    "title": "CTD-interpolation across cruises",
    "section": "",
    "text": "For this study, cruises were treated as a single site which was surveyed repeatedly. This approach assumes that there are no major differences in the water column so that similar profiles may be pooled. While assumption may not always hold true, so long as there are equal day/night samples in a water mass, comparison of DVM will still be valid.\n\n\nCode\nrm(list = ls())\nlibrary(ggplot2)\nlibrary(ggpubr)\nlibrary(suncalc)\nlibrary(EcotaxaTools)\n\n####\n# Data loading and set up #######\n####\nplot_values <- readRDS('../data/ctd_02_interp-grid.rds')$by_cruise\n\n# |- ctd data format -------------------------------\nctd_data <- readRDS('../data/01_ctd-trim-final.rds')\n\n#mush all casts together\nall_casts <- ctd_data|> list_to_tib('ctd_orgfilename')\nall_casts <- all_casts[,-1]\n\n#trim mess from the data\nall_casts <- all_casts[-which(is.na(all_casts$Depth)),]\nall_casts <- all_casts[-which(is.na(all_casts$Sal)),]\nall_casts <- all_casts[-which(is.na(all_casts$DO)),]\nall_casts <- all_casts[-which(is.na(all_casts$RFU)),]\n\n#keep only shallow casts\nall_casts <- all_casts[which(all_casts$Depth < 1200),]\n\n# |- Time of Day ----------------------------------\n\n# set up\nall_casts$tod <- rep(NA, nrow(all_casts))\nall_casts$cruise <- paste0(all_casts$proj_id, all_casts$cruise_id)\n\nfor(i in 1:length(ctd_data)) {\n  \n  #get time\n  casttime <- ctd_data[[i]]$Date[1]\n  \n  # assign tod\n  suntimes <- getSunlightTimes(\n    date = as.Date(casttime),\n    lat = ctd_data[[i]]$Lat[1],\n    lon = ctd_data[[i]]$Lon[1],\n    tz = 'GMT'\n  )\n  \n  if(casttime < suntimes$nauticalDawn | casttime > suntimes$nauticalDusk) {\n    tod <- 'night'\n  } else if (casttime > suntimes$nauticalDawn & casttime < suntimes$nauticalDusk) {\n    tod <- 'day'\n  } else {\n    tod <- 'twilight'\n  }\n  \n  #match to mega-df\n  all_casts$tod[all_casts$ctd_orgfilename == names(ctd_data)[i]] = tod\n}\n\n\n###\n# Plotting ################\n###\n\n#save colors\nODV_colours <- c(\"#feb483\", \"#d31f2a\", \"#ffc000\", \"#27ab19\", \"#0db5e6\", \"#7139fe\", \"#d16cfa\")\n\n# set up\nvalue_class <- function(cruise){\n  ret_list <- vector('list',4)\n  names(ret_list) <- c('Sal',\"Temperature\",'RFU','DO')\n  return(ret_list)\n}\n\ncruises <- unique(names(plot_values))\nplot_list <- lapply(cruises,value_class)\nnames(plot_list) <- cruises\n\n# |- Loop out for all casts -----------------------------\nfor(i in 1:length(plot_list)) {\n  cast_df <- all_casts[all_casts$cruise == names(plot_list)[i],]\n  \n  plot_list[[i]]$Sal <- ggplot()+\n    geom_tile(data = plot_values[[i]]$Sal,\n              aes(x = Date,\n                  y = Depth,\n                  fill = Sal)) +\n    geom_vline(data = cast_df,\n               aes(xintercept = Date,\n                   color = tod),\n               size = 1) +\n    scale_y_reverse()+\n    scale_fill_distiller(palette = 'Spectral')+\n    scale_color_manual(breaks = c('day','night'),\n                       values = c('grey','black'))+\n    labs(x = \"\",y = \"Depth [m]\", fill = \"Sal [PSU]\",\n         color = \"\")+\n    theme_pubr()+\n    theme(legend.position = 'right')+\n    coord_cartesian(expand = 0)\n  \n  plot_list[[i]]$Temperature <- ggplot()+\n    geom_tile(data = plot_values[[i]]$Temperature,\n              aes(x = Date,\n                  y = Depth,\n                  fill = Temperature)) +\n    geom_vline(data = cast_df,\n               aes(xintercept = Date,\n                   color = tod),\n               size = 1) +\n    scale_y_reverse()+\n    scale_fill_gradientn(colors = rev(ODV_colours))+\n    scale_color_manual(breaks = c('day','night'),\n                       values = c('grey','black'))+\n    labs(x = \"\",y = \"Depth [m]\", fill = \"Temperature\",\n         color = \"\")+\n    theme_pubr()+\n    theme(legend.position = 'right')+\n    coord_cartesian(expand = 0)\n  \n  plot_list[[i]]$RFU <- ggplot() + \n    geom_tile(data = plot_values[[i]]$RFU,\n              aes(x = Date,\n                  y = Depth,\n                  fill = RFU)) +\n    geom_vline(data = cast_df,\n               aes(xintercept = Date,\n                   color = tod),\n               size = 1) +\n    scale_y_reverse()+\n    scale_fill_distiller(palette = 'BuGn',\n                         direction = 1)+\n    scale_color_manual(breaks = c('day','night'),\n                       values = c('grey','black'))+\n    labs(x = \"\",y = \"Depth [m]\", fill = \"RFU\",\n         color = \"\")+\n    theme_pubr()+\n    theme(legend.position = 'right')+\n    coord_cartesian(expand = 0)\n  \n  plot_list[[i]]$DO <- ggplot() + \n    geom_tile(data = plot_values[[i]]$DO,\n              aes(x = Date,\n                  y = Depth,\n                  fill = DO)) +\n    geom_vline(data = cast_df,\n               aes(xintercept = Date,\n                   color = tod),\n               size = 1) +\n    scale_y_reverse()+\n    scale_fill_distiller(palette = 'GnBu',\n                         direction = 1)+\n    scale_color_manual(breaks = c('day','night'),\n                       values = c('grey','black'))+\n    labs(x = \"\",y = \"Depth [m]\", fill = \"DO\",\n         color = \"\")+\n    theme_pubr()+\n    theme(legend.position = 'right')+\n    coord_cartesian(expand = 0)\n}\n\n\n\n\nCode\nfor(i in 1:length(plot_list)) {\n  \n  outplot <- ggarrange(plot_list[[i]]$Sal + \n                         guides(color = 'none')+\n                         theme(axis.text.x = element_blank()),\n                        plot_list[[i]]$Temperature+ \n                         guides(color = 'none')+\n                         theme(axis.text = element_blank())+\n                         labs(y = \"\"),\n                        plot_list[[i]]$RFU + \n                         guides(color = 'none'),\n                        plot_list[[i]]$DO +\n                         guides(color = 'none') +\n                         theme(axis.text.y = element_blank())+\n                         labs(y = \"\"),\n                        ncol = 2, nrow = 2,\n                       align = 'hv')\n              \n  annotate_figure(outplot, top = text_grob(paste0('Cruise: ',cruises[i]))) |> print()\n}\n\n\n\n\n\nPhysical parameters across individual cruises. Vertical bars indicate CTD casts events with black indicating night and grey indicating day.\n\n\n\n\n\n\n\nPhysical parameters across individual cruises. Vertical bars indicate CTD casts events with black indicating night and grey indicating day.\n\n\n\n\n\n\n\nPhysical parameters across individual cruises. Vertical bars indicate CTD casts events with black indicating night and grey indicating day.\n\n\n\n\n\n\n\nPhysical parameters across individual cruises. Vertical bars indicate CTD casts events with black indicating night and grey indicating day.\n\n\n\n\n\n\n\nPhysical parameters across individual cruises. Vertical bars indicate CTD casts events with black indicating night and grey indicating day.\n\n\n\n\n\n\n\nPhysical parameters across individual cruises. Vertical bars indicate CTD casts events with black indicating night and grey indicating day.\n\n\n\n\n\n\n\nPhysical parameters across individual cruises. Vertical bars indicate CTD casts events with black indicating night and grey indicating day.\n\n\n\n\n\n\n\nPhysical parameters across individual cruises. Vertical bars indicate CTD casts events with black indicating night and grey indicating day.\n\n\n\n\n\n\n\nPhysical parameters across individual cruises. Vertical bars indicate CTD casts events with black indicating night and grey indicating day.\n\n\n\n\n\n\n\nPhysical parameters across individual cruises. Vertical bars indicate CTD casts events with black indicating night and grey indicating day.\n\n\n\n\n\n\n\nPhysical parameters across individual cruises. Vertical bars indicate CTD casts events with black indicating night and grey indicating day.\n\n\n\n\n\n\n\nPhysical parameters across individual cruises. Vertical bars indicate CTD casts events with black indicating night and grey indicating day.\n\n\n\n\n\n\n\nPhysical parameters across individual cruises. Vertical bars indicate CTD casts events with black indicating night and grey indicating day.\n\n\n\n\n\n\n\nPhysical parameters across individual cruises. Vertical bars indicate CTD casts events with black indicating night and grey indicating day.\n\n\n\n\n\n\n\nPhysical parameters across individual cruises. Vertical bars indicate CTD casts events with black indicating night and grey indicating day.\n\n\n\n\n\n\n\nPhysical parameters across individual cruises. Vertical bars indicate CTD casts events with black indicating night and grey indicating day.\n\n\n\n\n\n\n\nPhysical parameters across individual cruises. Vertical bars indicate CTD casts events with black indicating night and grey indicating day.\n\n\n\n\n\n\n\nPhysical parameters across individual cruises. Vertical bars indicate CTD casts events with black indicating night and grey indicating day.\n\n\n\n\n\n\n\nPhysical parameters across individual cruises. Vertical bars indicate CTD casts events with black indicating night and grey indicating day."
  },
  {
    "objectID": "supp_01_uvp-cast-info.html",
    "href": "supp_01_uvp-cast-info.html",
    "title": "CTD & UVP cast locations",
    "section": "",
    "text": "Casts were conducted aboard the R/V Atlantic Explorer. For analysis in this paper, casts on a single cruise are pooled together as if sampling one large water mass in separate locations. Daytime and nighttime casts are pooled in each cruise. Cruises sampled along a grid of locations surrounding the BATS region, southeast of Bermuda.\n\n\nCode\nrm(list = ls())\nlibrary('ggplot2')\nlibrary('rnaturalearth')\nlibrary('rnaturalearthdata')\n\n# |- get spatial data ----------\nworld <- ne_countries(scale = 'medium', returnclass = 'sf')\n\n# |- read in data -----------------\ncast_loc <- readRDS('../data/01_ctd-locations.rds')\n\n\n\n\nCode\nall_cast_map <- ggplot()+\n  geom_sf(data = world, fill = 'green')+\n  geom_point(aes(x = -cast_loc$lon, y = cast_loc$lat,\n                 shape = cast_loc$tod, col = cast_loc$tod),\n             position = position_jitter(width = .05, height = 0.05))+\n  coord_sf(xlim = c(-65,-62), ylim = c(30,33))+\n  theme_bw()+\n  labs(x = \"\",y = \"\", shape = \"\", color = \"\")+\n  scale_color_manual(values = c('beige','black'))+\n  theme(panel.background = element_rect(fill = 'cornflowerblue'),\n        axis.text.x = element_text(angle = 45, hjust = c(1,1)),\n        legend.position = 'bottom')\n\nprint(all_cast_map)\n\n\n\n\n\n\n\nCode\nlibrary(DT)\nlibrary(dplyr)\nuvp_data <- readRDS('../data/01_uvp-trim-final_large.rds')\n\n# get max_d\npar_max_d <- function(par_df) {\n  par_df[['depth']] |> max()\n}\n\nmax_d <- uvp_data$par_files |> \n  sapply(par_max_d)\n\nuvp_data$meta |> \n  select(profileid, latitude,longitude, cruise, sampledate) |> \n  left_join(data.frame(profileid = names(uvp_data$par_files),\n                       max_depth = max_d)) |> \n  group_by(cruise) |> \n  datatable()"
  },
  {
    "objectID": "supp_02_ctd-interp.html",
    "href": "supp_02_ctd-interp.html",
    "title": "Physical Backdrop - water column parameters across study period",
    "section": "",
    "text": "Over the course of the cruises, there was some seasonal variation. Figures below show the change in Salinity, Temperature, Chlorophyll, and Dissolved Oxygen\n\n\nCode\nrm(list = ls())\nlibrary(ggplot2)\nlibrary(ggpubr)\nfull_proj_values <- readRDS('../data/ctd_02_interp-grid.rds')$full_proj\n\nODV_colours <- c(\"#feb483\", \"#d31f2a\", \"#ffc000\", \"#27ab19\", \"#0db5e6\", \"#7139fe\", \"#d16cfa\")\n\n# set up\nvalue_class <- function(cruise){\n  ret_list <- vector('list',4)\n  names(ret_list) <- c('Sal',\"Temperature\",'RFU','DO')\n  return(ret_list)\n}\n\nfull_proj_plot <- list()\nfull_proj_plot$early <- value_class()\nfull_proj_plot$late <- value_class()\n\n\n# |- Plotting -----------------------\nfor(i in 1:length(full_proj_plot)) {\n  \n  full_proj_plot[[i]]$Sal <- ggplot()+\n    geom_tile(data = full_proj_values[[i]]$Sal,\n              aes(x = Date,\n                  y = Depth,\n                  fill = Sal)) +\n    scale_y_reverse()+\n    scale_fill_distiller(palette = 'Spectral')+\n    scale_color_manual(breaks = c('day','night'),\n                       values = c('grey','black'))+\n    scale_x_datetime(date_labels = '%Y-%b')+\n    labs(x = \"\",y = \"Depth [m]\", fill = \"Sal [PSU]\",\n         color = \"\")+\n    theme_pubr()+\n    theme(legend.position = 'right')+\n    coord_cartesian(expand = 0)\n  \n  full_proj_plot[[i]]$Temperature <- ggplot()+\n    geom_tile(data = full_proj_values[[i]]$Temperature,\n              aes(x = Date,\n                  y = Depth,\n                  fill = Temperature)) +\n    scale_y_reverse()+\n    scale_x_datetime(date_labels = '%Y-%b')+\n    scale_fill_gradientn(colors = rev(ODV_colours))+\n    scale_color_manual(breaks = c('day','night'),\n                       values = c('grey','black'))+\n    labs(x = \"\",y = \"Depth [m]\", fill = \"Temperature\",\n         color = \"\")+\n    theme_pubr()+\n    theme(legend.position = 'right')+\n    coord_cartesian(expand = 0)\n  \n  full_proj_plot[[i]]$RFU <- ggplot() + \n    geom_tile(data = full_proj_values[[i]]$RFU,\n              aes(x = Date,\n                  y = Depth,\n                  fill = RFU)) +\n    scale_y_reverse()+\n    scale_x_datetime(date_labels = '%Y-%b')+\n    scale_fill_distiller(palette = 'BuGn',\n                         direction = 1)+\n    scale_color_manual(breaks = c('day','night'),\n                       values = c('grey','black'))+\n    labs(x = \"\",y = \"Depth [m]\", fill = \"RFU\",\n         color = \"\")+\n    theme_pubr()+\n    theme(legend.position = 'right')+\n    coord_cartesian(expand = 0)\n  \n  full_proj_plot[[i]]$DO <- ggplot() + \n    geom_tile(data = full_proj_values[[i]]$DO,\n              aes(x = Date,\n                  y = Depth,\n                  fill = DO)) +\n    scale_y_reverse()+\n    scale_fill_distiller(palette = 'GnBu',\n                         direction = 1)+\n    scale_color_manual(breaks = c('day','night'),\n                       values = c('grey','black'))+\n    labs(x = \"\",y = \"Depth [m]\", fill = \"DO\",\n         color = \"\")+\n    theme_pubr()+\n    theme(legend.position = 'right')+\n    coord_cartesian(expand = 0)\n  \n}\n\n\n\n\nCode\nggarrange(full_proj_plot$early$Sal +\n            theme(axis.text.x = element_text(angle = 45,\n                                             hjust = 1,\n                                             vjust = 1)),\n          full_proj_plot$late$Sal +\n            theme(axis.text.y = element_blank(),\n                  axis.text.x = element_text(angle = 45,\n                                             hjust = 1,\n                                             vjust = 1))+\n            labs(y = \"\"),\n          common.legend = T,\n          legend = 'right',\n          nrow = 1,\n          widths = c(0.2,0.8),\n          align = 'hv')\n\n\n\n\n\nFigure 1a. Salinity values across whole study period interpolated from ctd casts.\n\n\n\n\n\n\nCode\nggarrange(full_proj_plot$early$Temperature +\n            theme(axis.text.x = element_text(angle = 45,\n                                             hjust = 1,\n                                             vjust = 1)),\n          full_proj_plot$late$Temperature +\n            theme(axis.text.y = element_blank(),\n                  axis.text.x = element_text(angle = 45,\n                                             hjust = 1,\n                                             vjust = 1))+\n            labs(y = \"\"),\n          common.legend = T,\n          legend = 'right',\n          nrow = 1,\n          widths = c(0.2,0.8),\n          align = 'hv')\n\n\n\n\n\nFigure 1b. Temperature values across whole study period interpolated from ctd casts.\n\n\n\n\n\n\nCode\nggarrange(full_proj_plot$early$RFU +\n            theme(axis.text.x = element_text(angle = 45,\n                                             hjust = 1,\n                                             vjust = 1)),\n          full_proj_plot$late$RFU +\n            theme(axis.text.y = element_blank(),\n                  axis.text.x = element_text(angle = 45,\n                                             hjust = 1,\n                                             vjust = 1))+\n            labs(y = \"\"),\n          common.legend = T,\n          legend = 'right',\n          nrow = 1,\n          widths = c(0.2,0.8),\n          align = 'hv')\n\n\n\n\n\nFigure 1c. RFU values across whole study period interpolated from ctd casts.\n\n\n\n\n\n\nCode\nggarrange(full_proj_plot$early$DO +\n            theme(axis.text.x = element_text(angle = 45,\n                                             hjust = 1,\n                                             vjust = 1)),\n          full_proj_plot$late$DO +\n            theme(axis.text.y = element_blank(),\n                  axis.text.x = element_text(angle = 45,\n                                             hjust = 1,\n                                             vjust = 1))+\n            labs(y = \"\"),\n          common.legend = T,\n          legend = 'right',\n          nrow = 1,\n          widths = c(0.2,0.8),\n          align = 'hv')\n\n\n\n\n\nFigure 1d. DO values across whole study period interpolated from ctd casts."
  },
  {
    "objectID": "supp_03_pc-extended-info.html",
    "href": "supp_03_pc-extended-info.html",
    "title": "Additional PCA Information",
    "section": "",
    "text": "Additional Information related to the PCA used in this analysis are visible here. View the main conclusions from the analysis here.\n\n\nCode\nrm(list = ls())\nlibrary(DT)\nlibrary(EcotaxaTools)\nlibrary(ggplot2)\nlibrary(ggpubr)\n\n\npca_results <- readRDS('../data/02_cope-pca-res.rds')\n\n\n\n\nCode\n# |- make a circle for plotting variable contributions -------------------\ncurl <- seq(-pi,pi, length = 50)\ncirc <- data.frame(x = sin(curl), y = cos(curl))\n\n# |- Extract variable contributions ----------------------------\npc_df <- data.frame(\n  pc1 = pca_results$var$coord[,1],\n  pc2 = pca_results$var$coord[,2],\n  pc3 = pca_results$var$coord[,3],\n  pc4 = pca_results$var$coord[,4],\n  vars = row.names(pca_results$var$coord)\n)\n\npc1_pc2 <- ggplot() +\n  geom_path(data = circ,aes(x,y), lty = 2, color = \"grey\", alpha = 0.7) +\n  geom_text(data = pc_df, aes(x = pc1, y = pc2, label = vars),\n            position = position_jitter()) +\n  geom_segment(data = pc_df,\n               aes(x = 0, y = 0, xend = pc1*0.9, yend = pc2*0.9),\n               arrow = arrow(length = unit(1/2, 'picas')), color = \"grey30\") +\n  labs(x = 'PC1 - 34.23%',y = 'PC2 - 27.24%')+\n  theme_pubclean()+\n  theme(panel.border = element_rect(fill = 'transparent'))\n\npc3_pc4 <- ggplot() +\n  geom_path(data = circ,aes(x,y), lty = 2, color = \"grey\", alpha = 0.7) +\n  geom_text(data = pc_df, aes(x = pc3, y = pc4, label = vars),\n            position = position_jitter()) +\n  geom_segment(data = pc_df,\n               aes(x = 0, y = 0, xend = pc3*0.9, yend = pc4*0.9),\n               arrow = arrow(length = unit(1/2, 'picas')), color = \"grey30\") +\n  labs(x = 'PC3 - 17.05%',y = 'PC4 - 09.38%')+\n  theme_pubclean()+\n  theme(panel.border = element_rect(fill = 'transparent'))\n\nggarrange(pc1_pc2, pc3_pc4)\n\n\n\n\n\nSpecific loading scores are available for each of the four dimensions:\n\n\nCode\ndatatable(pca_results$var$coord[,c(1:4)])"
  }
]