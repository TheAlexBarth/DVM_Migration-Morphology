---
title: Supporting Information
---


```{r}
rm(list = ls())
library('ggplot2')
library('rnaturalearth')
library('rnaturalearthdata')

# |- get spatial data ----------
world <- ne_countries(scale = 'medium', returnclass = 'sf')

# |- read in data -----------------
cast_loc <- readRDS('../data/01_ctd-locations.rds')
```




```{r, fig.cap='Supplemental Figure S1. Map of CTD Cast Deployments. Dark triangle points indicate night casts, tan circles indicate day casts.'}

all_cast_map <- ggplot()+
  geom_sf(data = world, fill = 'green')+
  geom_point(aes(x = -cast_loc$lon, y = cast_loc$lat,
                 shape = cast_loc$tod, col = cast_loc$tod),
             position = position_jitter(width = .05, height = 0.05))+
  coord_sf(xlim = c(-65,-62), ylim = c(30,33))+
  theme_bw()+
  labs(x = "",y = "", shape = "", color = "")+
  scale_color_manual(values = c('beige','black'))+
  theme(panel.background = element_rect(fill = 'cornflowerblue'),
        axis.text.x = element_text(angle = 45, hjust = c(1,1)),
        legend.position = 'bottom')

print(all_cast_map)
```


```{r, fig.cap = 'Supplemental Table S1. Detailed CTD deployment information'}
library(DT)
library(dplyr)
uvp_data <- readRDS('../data/01_uvp-trim-final_large.rds')

# get max_d
par_max_d <- function(par_df) {
  par_df[['depth']] |> max()
}

max_d <- uvp_data$par_files |> 
  sapply(par_max_d)

uvp_data$meta |> 
  select(profileid, latitude,longitude, cruise, sampledate) |> 
  left_join(data.frame(profileid = names(uvp_data$par_files),
                       max_depth = max_d)) |> 
  group_by(cruise) |> 
  knitr::kable()
```


```{r, warning=FALSE}

rm(list = ls())
library(ggplot2)
library(ggpubr)
library(suncalc)
library(EcotaxaTools)

####
# Data loading and set up #######
####
plot_values <- readRDS('../data/ctd_02_interp-grid.rds')$by_cruise

# |- ctd data format -------------------------------
ctd_data <- readRDS('../data/01_ctd-trim-final.rds')

#mush all casts together
all_casts <- ctd_data|> list_to_tib('ctd_orgfilename')
all_casts <- all_casts[,-1]

#trim mess from the data
all_casts <- all_casts[-which(is.na(all_casts$Depth)),]
all_casts <- all_casts[-which(is.na(all_casts$Sal)),]
all_casts <- all_casts[-which(is.na(all_casts$DO)),]
all_casts <- all_casts[-which(is.na(all_casts$RFU)),]

#keep only shallow casts
all_casts <- all_casts[which(all_casts$Depth < 1200),]

# |- Time of Day ----------------------------------

# set up
all_casts$tod <- rep(NA, nrow(all_casts))
all_casts$cruise <- paste0(all_casts$proj_id, all_casts$cruise_id)

for(i in 1:length(ctd_data)) {
  
  #get time
  casttime <- ctd_data[[i]]$Date[1]
  
  # assign tod
  suntimes <- getSunlightTimes(
    date = as.Date(casttime),
    lat = ctd_data[[i]]$Lat[1],
    lon = ctd_data[[i]]$Lon[1],
    tz = 'GMT'
  )
  
  if(casttime < suntimes$nauticalDawn | casttime > suntimes$nauticalDusk) {
    tod <- 'night'
  } else if (casttime > suntimes$nauticalDawn & casttime < suntimes$nauticalDusk) {
    tod <- 'day'
  } else {
    tod <- 'twilight'
  }
  
  #match to mega-df
  all_casts$tod[all_casts$ctd_orgfilename == names(ctd_data)[i]] = tod
}


###
# Plotting ################
###

#save colors
ODV_colours <- c("#feb483", "#d31f2a", "#ffc000", "#27ab19", "#0db5e6", "#7139fe", "#d16cfa")

# set up
value_class <- function(cruise){
  ret_list <- vector('list',4)
  names(ret_list) <- c('Sal',"Temperature",'RFU','DO')
  return(ret_list)
}

cruises <- unique(names(plot_values))
plot_list <- lapply(cruises,value_class)
names(plot_list) <- cruises

# |- Loop out for all casts -----------------------------
for(i in 1:length(plot_list)) {
  cast_df <- all_casts[all_casts$cruise == names(plot_list)[i],]
  
  plot_list[[i]]$Sal <- ggplot()+
    geom_tile(data = plot_values[[i]]$Sal,
              aes(x = Date,
                  y = Depth,
                  fill = Sal)) +
    geom_vline(data = cast_df,
               aes(xintercept = Date,
                   color = tod),
               size = 1) +
    scale_y_reverse()+
    scale_fill_distiller(palette = 'Spectral')+
    scale_color_manual(breaks = c('day','night'),
                       values = c('grey','black'))+
    labs(x = "",y = "Depth [m]", fill = "Sal [PSU]",
         color = "")+
    theme_pubr()+
    theme(legend.position = 'right')+
    coord_cartesian(expand = 0)
  
  plot_list[[i]]$Temperature <- ggplot()+
    geom_tile(data = plot_values[[i]]$Temperature,
              aes(x = Date,
                  y = Depth,
                  fill = Temperature)) +
    geom_vline(data = cast_df,
               aes(xintercept = Date,
                   color = tod),
               size = 1) +
    scale_y_reverse()+
    scale_fill_gradientn(colors = rev(ODV_colours))+
    scale_color_manual(breaks = c('day','night'),
                       values = c('grey','black'))+
    labs(x = "",y = "Depth [m]", fill = "Temperature",
         color = "")+
    theme_pubr()+
    theme(legend.position = 'right')+
    coord_cartesian(expand = 0)
  
  plot_list[[i]]$RFU <- ggplot() + 
    geom_tile(data = plot_values[[i]]$RFU,
              aes(x = Date,
                  y = Depth,
                  fill = RFU)) +
    geom_vline(data = cast_df,
               aes(xintercept = Date,
                   color = tod),
               size = 1) +
    scale_y_reverse()+
    scale_fill_distiller(palette = 'BuGn',
                         direction = 1)+
    scale_color_manual(breaks = c('day','night'),
                       values = c('grey','black'))+
    labs(x = "",y = "Depth [m]", fill = "RFU",
         color = "")+
    theme_pubr()+
    theme(legend.position = 'right')+
    coord_cartesian(expand = 0)
  
  plot_list[[i]]$DO <- ggplot() + 
    geom_tile(data = plot_values[[i]]$DO,
              aes(x = Date,
                  y = Depth,
                  fill = DO)) +
    geom_vline(data = cast_df,
               aes(xintercept = Date,
                   color = tod),
               size = 1) +
    scale_y_reverse()+
    scale_fill_distiller(palette = 'GnBu',
                         direction = 1)+
    scale_color_manual(breaks = c('day','night'),
                       values = c('grey','black'))+
    labs(x = "",y = "Depth [m]", fill = "DO",
         color = "")+
    theme_pubr()+
    theme(legend.position = 'right')+
    coord_cartesian(expand = 0)
}

```

```{r, fig.cap='Supplemental Figure S2. Physical parameters across individual cruises. Vertical bars indicate CTD casts events with black indicating night and grey indicating day.',out.width='100%', fig.width=12}
#| column: screen-inset

for(i in 1:length(plot_list)) {
  
  outplot <- ggarrange(plot_list[[i]]$Sal + 
                         guides(color = 'none')+
                         theme(axis.text.x = element_blank()),
                        plot_list[[i]]$Temperature+ 
                         guides(color = 'none')+
                         theme(axis.text = element_blank())+
                         labs(y = ""),
                        plot_list[[i]]$RFU + 
                         guides(color = 'none'),
                        plot_list[[i]]$DO +
                         guides(color = 'none') +
                         theme(axis.text.y = element_blank())+
                         labs(y = ""),
                        ncol = 2, nrow = 2,
                       align = 'hv')
              
  annotate_figure(outplot, top = text_grob(paste0('Cruise: ',cruises[i]))) |> print()
}
```

```{r}
rm(list = ls())
library(DT)
library(EcotaxaTools)
library(ggplot2)
library(ggpubr)


pca_results <- readRDS('../data/02_cope-pca-res.rds')
```


```{r, fig.cap='Supplemental Figure S3. PCA plot with major loading variables plotted.', fig.width=7, fig.height=7, out.width='100%', out.height='100%'}

# |- make a circle for plotting variable contributions -------------------
curl <- seq(-pi,pi, length = 50)
circ <- data.frame(x = sin(curl), y = cos(curl))

# |- Extract variable contributions ----------------------------
pc_df <- data.frame(
  pc1 = pca_results$var$coord[,1],
  pc2 = pca_results$var$coord[,2],
  pc3 = pca_results$var$coord[,3],
  pc4 = pca_results$var$coord[,4],
  vars = row.names(pca_results$var$coord)
)

pc1_pc2 <- ggplot() +
  geom_path(data = circ,aes(x,y), lty = 2, color = "grey", alpha = 0.7) +
  geom_text(data = pc_df, aes(x = pc1, y = pc2, label = vars),
            position = position_jitter()) +
  geom_segment(data = pc_df,
               aes(x = 0, y = 0, xend = pc1*0.9, yend = pc2*0.9),
               arrow = arrow(length = unit(1/2, 'picas')), color = "grey30") +
  labs(x = 'PC1 - 34.23%',y = 'PC2 - 27.24%')+
  theme_pubclean()+
  theme(panel.border = element_rect(fill = 'transparent'))

pc3_pc4 <- ggplot() +
  geom_path(data = circ,aes(x,y), lty = 2, color = "grey", alpha = 0.7) +
  geom_text(data = pc_df, aes(x = pc3, y = pc4, label = vars),
            position = position_jitter()) +
  geom_segment(data = pc_df,
               aes(x = 0, y = 0, xend = pc3*0.9, yend = pc4*0.9),
               arrow = arrow(length = unit(1/2, 'picas')), color = "grey30") +
  labs(x = 'PC3 - 17.05%',y = 'PC4 - 09.38%')+
  theme_pubclean()+
  theme(panel.border = element_rect(fill = 'transparent'))

ggarrange(pc1_pc2, pc3_pc4)

```

```{r, fig.cap='Supplemental Table S2. Loading scores for morphological factors on the PCA.'}
knitr::kable(pca_results$var$coord[,c(1:4)])
```


